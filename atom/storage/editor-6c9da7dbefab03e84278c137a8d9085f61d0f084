{"mode":"editor","version":1,"windowDimensions":{"x":0,"y":22,"width":1440,"height":878},"syntax":{"deserializer":"Syntax","grammarOverridesByPath":{}},"project":{"path":"/Users/marian/Projects/miniprojects/electionCorrelation","buffers":[{"text":"var app = {\n    constants: {\n        baseURL: 'http://localhost:8008/'\n    },\n    init: function() {\n        console.log('Init app!');\n        app.dataService.getSPDDistrictResult();\n    },\n    dataService: {\n        getSPDDistrictResult: function() {\n            console.log('Get the results of the districts.');\n\n            jQuery.ajax({\n                url: app.constants.baseURL + 'res/Ratswahl_NRW5.csv'\n            }).done(function(data) {\n                console.log('Get the data for getSPDdistrictResult');\n                var arrayData = CSVToArray(data, \";\");\n\n                var spdResultData = [];\n\n                _.each(arrayData, function(item) {\n                    spdResultData.push(item[14]);\n                    console.log(\"Add item\");\n                });\n\n                app.graphService.drawSPDvsBMGraph(spdResultData);\n            });\n        }\n    },\n    graphService: {\n        drawSPDvsBMGraph: function(spdData) {\n            console.log(spdData);\n        }\n    }\n};\n\njQuery(document).ready(function() {\n    app.init();\n\n    return true;\n});\n\nfunction CSVToArray( strData, strDelimiter ){\n\t// Check to see if the delimiter is defined. If not,\n\t// then default to comma.\n\tstrDelimiter = (strDelimiter || \",\");\n\n\t// Create a regular expression to parse the CSV values.\n\tvar objPattern = new RegExp(\n\t\t(\n\t\t\t// Delimiters.\n\t\t\t\"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n\t\t\t// Quoted fields.\n\t\t\t\"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n\t\t\t// Standard fields.\n\t\t\t\"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n\t\t),\n\t\t\"gi\"\n\t\t);\n\n\n\t// Create an array to hold our data. Give the array\n\t// a default empty first row.\n\tvar arrData = [[]];\n\n\t// Create an array to hold our individual pattern\n\t// matching groups.\n\tvar arrMatches = null;\n\n\n\t// Keep looping over the regular expression matches\n\t// until we can no longer find a match.\n\twhile (arrMatches = objPattern.exec( strData )){\n\n\t\t// Get the delimiter that was found.\n\t\tvar strMatchedDelimiter = arrMatches[ 1 ];\n\n\t\t// Check to see if the given delimiter has a length\n\t\t// (is not the start of string) and if it matches\n\t\t// field delimiter. If id does not, then we know\n\t\t// that this delimiter is a row delimiter.\n\t\tif (\n\t\t\tstrMatchedDelimiter.length &&\n\t\t\t(strMatchedDelimiter != strDelimiter)\n\t\t\t){\n\n\t\t\t// Since we have reached a new row of data,\n\t\t\t// add an empty row to our data array.\n\t\t\tarrData.push( [] );\n\n\t\t}\n\n\n\t\t// Now that we have our delimiter out of the way,\n\t\t// let's check to see which kind of value we\n\t\t// captured (quoted or unquoted).\n\t\tif (arrMatches[ 2 ]){\n\n\t\t\t// We found a quoted value. When we capture\n\t\t\t// this value, unescape any double quotes.\n\t\t\tvar strMatchedValue = arrMatches[ 2 ].replace(\n\t\t\t\tnew RegExp( \"\\\"\\\"\", \"g\" ),\n\t\t\t\t\"\\\"\"\n\t\t\t\t);\n\n\t\t} else {\n\n\t\t\t// We found a non-quoted value.\n\t\t\tvar strMatchedValue = arrMatches[ 3 ];\n\n\t\t}\n\n\n\t\t// Now that we have our value string, let's add\n\t\t// it to the data array.\n\t\tarrData[ arrData.length - 1 ].push( strMatchedValue );\n\t}\n\n\t// Return the parsed data.\n\treturn( arrData );\n}\n","markers":{"markers":{"1":{"id":1,"range":[[6,41],[6,41]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":226,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"2":{"id":2,"range":[[0,0],[0,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"3":{"id":3,"range":[[0,0],[0,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"5":{"id":5,"range":[[0,0],[0,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"6":{"id":6,"range":[[0,0],[0,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"7":{"id":7,"range":[[0,0],[0,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"8":{"id":8,"range":[[0,0],[0,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"9":{"id":9,"range":[[0,0],[123,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"10":{"id":10,"range":[[0,0],[123,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"11":{"id":11,"range":[[0,10],[34,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"13":{"id":13,"range":[[4,21],[7,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"15":{"id":15,"range":[[8,17],[28,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"16":{"id":16,"range":[[9,38],[9,39]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"17":{"id":17,"range":[[9,41],[27,8]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"18":{"id":18,"range":[[10,23],[10,59]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"19":{"id":19,"range":[[10,24],[10,59]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"20":{"id":20,"range":[[12,23],[14,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"21":{"id":21,"range":[[12,24],[14,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"22":{"id":22,"range":[[13,21],[14,0]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"23":{"id":23,"range":[[1,15],[3,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"24":{"id":24,"range":[[2,17],[2,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"25":{"id":25,"range":[[2,40],[2,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"26":{"id":26,"range":[[14,19],[26,13]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"27":{"id":27,"range":[[14,28],[14,33]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"28":{"id":28,"range":[[14,35],[26,12]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"29":{"id":29,"range":[[15,27],[15,67]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"30":{"id":30,"range":[[15,28],[15,66]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"32":{"id":32,"range":[[13,68],[13,68]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"33":{"id":33,"range":[[15,69],[26,0]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"34":{"id":34,"range":[[15,69],[26,0]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"35":{"id":35,"range":[[15,69],[26,0]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"37":{"id":37,"range":[[16,42],[16,52]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"38":{"id":38,"range":[[16,49],[16,51]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"39":{"id":39,"range":[[20,22],[23,17]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"40":{"id":40,"range":[[20,42],[20,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"41":{"id":41,"range":[[20,49],[23,16]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"42":{"id":42,"range":[[21,20],[22,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"43":{"id":43,"range":[[21,20],[22,44]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"45":{"id":45,"range":[[21,38],[21,47]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"47":{"id":47,"range":[[7,0],[7,0]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"48":{"id":48,"range":[[22,31],[22,42]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"49":{"id":49,"range":[[22,32],[22,41]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"50":{"id":50,"range":[[23,18],[23,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"51":{"id":51,"range":[[23,18],[23,19]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"52":{"id":52,"range":[[19,0],[19,0]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"54":{"id":54,"range":[[29,18],[33,4]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"55":{"id":55,"range":[[32,0],[32,0]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"},"56":{"id":56,"range":[[32,0],[32,8]],"tailed":true,"reversed":false,"valid":false,"invalidate":"overlap","persistent":true,"properties":{},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/marian/Projects/miniprojects/electionCorrelation/app/scripts/main.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"6e6cbeb34ff5c12e589e5d7705143b6801c003da","deserializer":"TextBuffer"},{"text":"{\n    \"node\": true,\n    \"browser\": true,\n    \"esnext\": true,\n    \"bitwise\": true,\n    \"camelcase\": true,\n    \"curly\": true,\n    \"eqeqeq\": true,\n    \"immed\": true,\n    \"indent\": 4,\n    \"latedef\": true,\n    \"newcap\": true,\n    \"noarg\": true,\n    \"undef\": true,\n    \"unused\": true,\n    \"strict\": false,\n    \"trailing\": true,\n    \"smarttabs\": true,\n    \"jquery\": true\n}\n","markers":{"markers":{"1":{"id":1,"range":[[12,18],[12,18]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":380,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/marian/Projects/miniprojects/electionCorrelation/.jshintrc","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"06419af1d18d437c77ca2d4dfdf26b4431e9d55d","deserializer":"TextBuffer"},{"text":"{\n  \"name\": \"electioncorrelation\",\n  \"version\": \"0.0.0\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"grunt\": \"~0.4.1\",\n    \"grunt-contrib-copy\": \"~0.5.0\",\n    \"grunt-contrib-concat\": \"~0.3.0\",\n    \"grunt-contrib-uglify\": \"~0.4.0\",\n    \"grunt-contrib-jshint\": \"~0.9.2\",\n    \"grunt-contrib-cssmin\": \"~0.9.0\",\n    \"grunt-contrib-connect\": \"~0.7.1\",\n    \"grunt-contrib-clean\": \"~0.5.0\",\n    \"grunt-contrib-htmlmin\": \"~0.2.0\",\n    \"grunt-bower-install\": \"~1.4.0\",\n    \"grunt-contrib-imagemin\": \"~0.6.0\",\n    \"grunt-contrib-watch\": \"~0.6.1\",\n    \"grunt-rev\": \"~0.1.0\",\n    \"grunt-autoprefixer\": \"~0.7.2\",\n    \"grunt-usemin\": \"~2.1.0\",\n    \"grunt-mocha\": \"~0.4.10\",\n    \"grunt-newer\": \"~0.7.0\",\n    \"grunt-svgmin\": \"~0.4.0\",\n    \"grunt-concurrent\": \"~0.5.0\",\n    \"load-grunt-tasks\": \"~0.4.0\",\n    \"time-grunt\": \"~0.3.1\",\n    \"jshint-stylish\": \"~0.1.5\"\n  },\n  \"engines\": {\n    \"node\": \">=0.10.0\"\n  }\n}\n","markers":{"markers":{"1":{"id":1,"range":[[26,30],[26,30]],"tailed":false,"reversed":false,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":415,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/marian/Projects/miniprojects/electionCorrelation/package.json","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"2b1c7e96f73811e0034dda984ab9471cd5d5aa1a","deserializer":"TextBuffer"},{"text":"// Generated on 2014-05-27 using generator-webapp 0.4.9\n'use strict';\n\n// # Globbing\n// for performance reasons we're only matching one level down:\n// 'test/spec/{,*/}*.js'\n// use this if you want to recursively match all subfolders:\n// 'test/spec/**/*.js'\n\nmodule.exports = function (grunt) {\n\n    // Load grunt tasks automatically\n    require('load-grunt-tasks')(grunt);\n\n    // Time how long tasks take. Can help when optimizing build times\n    require('time-grunt')(grunt);\n\n    // Configurable paths\n    var config = {\n        app: 'app',\n        dist: 'dist'\n    };\n\n    // Define the configuration for all the tasks\n    grunt.initConfig({\n\n        // Project settings\n        config: config,\n\n        // Watches files for changes and runs tasks based on the changed files\n        watch: {\n            bower: {\n                files: ['bower.json'],\n                tasks: ['bowerInstall']\n            },\n            js: {\n                files: ['<%= config.app %>/scripts/{,*/}*.js'],\n                tasks: ['jshint'],\n                options: {\n                    livereload: true\n                }\n            },\n            jstest: {\n                files: ['test/spec/{,*/}*.js'],\n                tasks: ['test:watch']\n            },\n            gruntfile: {\n                files: ['Gruntfile.js']\n            },\n            styles: {\n                files: ['<%= config.app %>/styles/{,*/}*.css'],\n                tasks: ['newer:copy:styles', 'autoprefixer']\n            },\n            livereload: {\n                options: {\n                    livereload: '<%= connect.options.livereload %>'\n                },\n                files: [\n                    '<%= config.app %>/{,*/}*.html',\n                    '.tmp/styles/{,*/}*.css',\n                    '<%= config.app %>/images/{,*/}*'\n                ]\n            }\n        },\n\n        // The actual grunt server settings\n        connect: {\n            options: {\n                port: 8008,\n                open: true,\n                livereload: 35729,\n                // Change this to '0.0.0.0' to access the server from outside\n                hostname: 'localhost'\n            },\n            livereload: {\n                options: {\n                    middleware: function(connect) {\n                        return [\n                            connect.static('.tmp'),\n                            connect().use('/bower_components', connect.static('./bower_components')),\n                            connect.static(config.app)\n                        ];\n                    }\n                }\n            },\n            test: {\n                options: {\n                    open: false,\n                    port: 9001,\n                    middleware: function(connect) {\n                        return [\n                            connect.static('.tmp'),\n                            connect.static('test'),\n                            connect().use('/bower_components', connect.static('./bower_components')),\n                            connect.static(config.app)\n                        ];\n                    }\n                }\n            },\n            dist: {\n                options: {\n                    base: '<%= config.dist %>',\n                    livereload: false\n                }\n            }\n        },\n\n        // Empties folders to start fresh\n        clean: {\n            dist: {\n                files: [{\n                    dot: true,\n                    src: [\n                        '.tmp',\n                        '<%= config.dist %>/*',\n                        '!<%= config.dist %>/.git*'\n                    ]\n                }]\n            },\n            server: '.tmp'\n        },\n\n        // Make sure code styles are up to par and there are no obvious mistakes\n        jshint: {\n            options: {\n                jshintrc: '.jshintrc',\n                reporter: require('jshint-stylish')\n            },\n            all: [\n                'Gruntfile.js',\n                '<%= config.app %>/scripts/{,*/}*.js',\n                '!<%= config.app %>/scripts/vendor/*',\n                'test/spec/{,*/}*.js'\n            ]\n        },\n\n        // Mocha testing framework configuration options\n        mocha: {\n            all: {\n                options: {\n                    run: true,\n                    urls: ['http://<%= connect.test.options.hostname %>:<%= connect.test.options.port %>/index.html']\n                }\n            }\n        },\n\n        // Add vendor prefixed styles\n        autoprefixer: {\n            options: {\n                browsers: ['last 1 version']\n            },\n            dist: {\n                files: [{\n                    expand: true,\n                    cwd: '.tmp/styles/',\n                    src: '{,*/}*.css',\n                    dest: '.tmp/styles/'\n                }]\n            }\n        },\n\n        // Automatically inject Bower components into the HTML file\n        bowerInstall: {\n            app: {\n                src: ['<%= config.app %>/index.html'],\n                exclude: ['bower_components/bootstrap/dist/js/bootstrap.js']\n            }\n        },\n\n        // Renames files for browser caching purposes\n        rev: {\n            dist: {\n                files: {\n                    src: [\n                        '<%= config.dist %>/scripts/{,*/}*.js',\n                        '<%= config.dist %>/styles/{,*/}*.css',\n                        '<%= config.dist %>/images/{,*/}*.*',\n                        '<%= config.dist %>/styles/fonts/{,*/}*.*',\n                        '<%= config.dist %>/*.{ico,png}'\n                    ]\n                }\n            }\n        },\n\n        // Reads HTML for usemin blocks to enable smart builds that automatically\n        // concat, minify and revision files. Creates configurations in memory so\n        // additional tasks can operate on them\n        useminPrepare: {\n            options: {\n                dest: '<%= config.dist %>'\n            },\n            html: '<%= config.app %>/index.html'\n        },\n\n        // Performs rewrites based on rev and the useminPrepare configuration\n        usemin: {\n            options: {\n                assetsDirs: ['<%= config.dist %>', '<%= config.dist %>/images']\n            },\n            html: ['<%= config.dist %>/{,*/}*.html'],\n            css: ['<%= config.dist %>/styles/{,*/}*.css']\n        },\n\n        // The following *-min tasks produce minified files in the dist folder\n        imagemin: {\n            dist: {\n                files: [{\n                    expand: true,\n                    cwd: '<%= config.app %>/images',\n                    src: '{,*/}*.{gif,jpeg,jpg,png}',\n                    dest: '<%= config.dist %>/images'\n                }]\n            }\n        },\n\n        svgmin: {\n            dist: {\n                files: [{\n                    expand: true,\n                    cwd: '<%= config.app %>/images',\n                    src: '{,*/}*.svg',\n                    dest: '<%= config.dist %>/images'\n                }]\n            }\n        },\n\n        htmlmin: {\n            dist: {\n                options: {\n                    collapseBooleanAttributes: true,\n                    collapseWhitespace: true,\n                    removeAttributeQuotes: true,\n                    removeCommentsFromCDATA: true,\n                    removeEmptyAttributes: true,\n                    removeOptionalTags: true,\n                    removeRedundantAttributes: true,\n                    useShortDoctype: true\n                },\n                files: [{\n                    expand: true,\n                    cwd: '<%= config.dist %>',\n                    src: '{,*/}*.html',\n                    dest: '<%= config.dist %>'\n                }]\n            }\n        },\n\n        // By default, your `index.html`'s <!-- Usemin block --> will take care of\n        // minification. These next options are pre-configured if you do not wish\n        // to use the Usemin blocks.\n        // cssmin: {\n        //     dist: {\n        //         files: {\n        //             '<%= config.dist %>/styles/main.css': [\n        //                 '.tmp/styles/{,*/}*.css',\n        //                 '<%= config.app %>/styles/{,*/}*.css'\n        //             ]\n        //         }\n        //     }\n        // },\n        // uglify: {\n        //     dist: {\n        //         files: {\n        //             '<%= config.dist %>/scripts/scripts.js': [\n        //                 '<%= config.dist %>/scripts/scripts.js'\n        //             ]\n        //         }\n        //     }\n        // },\n        // concat: {\n        //     dist: {}\n        // },\n\n        // Copies remaining files to places other tasks can use\n        copy: {\n            dist: {\n                files: [{\n                    expand: true,\n                    dot: true,\n                    cwd: '<%= config.app %>',\n                    dest: '<%= config.dist %>',\n                    src: [\n                        '*.{ico,png,txt}',\n                        '.htaccess',\n                        'images/{,*/}*.webp',\n                        '{,*/}*.html',\n                        'styles/fonts/{,*/}*.*'\n                    ]\n                }, {\n                    expand: true,\n                    dot: true,\n                    cwd: 'bower_components/bootstrap/dist',\n                    src: ['fonts/*.*'],\n                    dest: '<%= config.dist %>'\n                }]\n            },\n            styles: {\n                expand: true,\n                dot: true,\n                cwd: '<%= config.app %>/styles',\n                dest: '.tmp/styles/',\n                src: '{,*/}*.css'\n            }\n        },\n\n        // Run some tasks in parallel to speed up build process\n        concurrent: {\n            server: [\n                'copy:styles'\n            ],\n            test: [\n                'copy:styles'\n            ],\n            dist: [\n                'copy:styles',\n                'imagemin',\n                'svgmin'\n            ]\n        }\n    });\n\n\n    grunt.registerTask('serve', function (target) {\n        if (target === 'dist') {\n            return grunt.task.run(['build', 'connect:dist:keepalive']);\n        }\n\n        grunt.task.run([\n            'clean:server',\n            'concurrent:server',\n            'autoprefixer',\n            'connect:livereload',\n            'watch'\n        ]);\n    });\n\n    grunt.registerTask('server', function (target) {\n        grunt.log.warn('The `server` task has been deprecated. Use `grunt serve` to start a server.');\n        grunt.task.run([target ? ('serve:' + target) : 'serve']);\n    });\n\n    grunt.registerTask('test', function (target) {\n        if (target !== 'watch') {\n            grunt.task.run([\n                'clean:server',\n                'concurrent:test',\n                'autoprefixer'\n            ]);\n        }\n\n        grunt.task.run([\n            'connect:test',\n            'mocha'\n        ]);\n    });\n\n    grunt.registerTask('build', [\n        'clean:dist',\n        'useminPrepare',\n        'concurrent:dist',\n        'autoprefixer',\n        'concat',\n        'cssmin',\n        'uglify',\n        'copy:dist',\n        'rev',\n        'usemin',\n        'htmlmin'\n    ]);\n\n    grunt.registerTask('default', [\n        'newer:jshint',\n        'test',\n        'build'\n    ]);\n};\n","markers":{"markers":{"1":{"id":1,"range":[[65,43],[65,43]],"tailed":false,"reversed":true,"valid":true,"invalidate":"never","persistent":true,"properties":{"type":"selection","editorId":419,"goalBufferRange":null,"preserveFolds":true},"deserializer":"Marker"},"8":{"id":8,"range":[[30,0],[63,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{"class":"fold","displayBufferId":420},"deserializer":"Marker"},"9":{"id":9,"range":[[66,0],[105,10]],"tailed":true,"reversed":false,"valid":true,"invalidate":"overlap","persistent":true,"properties":{"class":"fold","displayBufferId":420},"deserializer":"Marker"}},"deserializer":"MarkerManager"},"history":{"undoStack":[],"redoStack":[],"deserializer":"History"},"filePath":"/Users/marian/Projects/miniprojects/electionCorrelation/Gruntfile.js","modifiedWhenLastPersisted":false,"digestWhenLastPersisted":"3fde8912ae23c3d79682939d2e08ab83d75b04c3","deserializer":"TextBuffer"}],"deserializer":"Project"},"workspace":{"paneContainer":{"root":{"items":[{"id":226,"softTabs":true,"displayBuffer":{"id":227,"softWrap":false,"editorWidthInChars":147,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/marian/Projects/miniprojects/electionCorrelation/app/scripts/main.js","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":415,"softTabs":true,"displayBuffer":{"id":416,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/marian/Projects/miniprojects/electionCorrelation/package.json","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":419,"softTabs":true,"displayBuffer":{"id":420,"softWrap":false,"editorWidthInChars":146,"scrollTop":317,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/marian/Projects/miniprojects/electionCorrelation/Gruntfile.js","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"},{"id":380,"softTabs":true,"displayBuffer":{"id":381,"softWrap":false,"editorWidthInChars":152,"scrollTop":0,"scrollLeft":0,"tokenizedBuffer":{"bufferPath":"/Users/marian/Projects/miniprojects/electionCorrelation/.jshintrc","tabLength":4,"deserializer":"TokenizedBuffer"},"deserializer":"DisplayBuffer"},"deserializer":"Editor"}],"activeItemUri":"/Users/marian/Projects/miniprojects/electionCorrelation/Gruntfile.js","focused":true,"active":true,"deserializer":"Pane"},"deserializer":"PaneContainer"},"fullScreen":false,"deserializer":"Workspace"},"packageStates":{"command-logger":{"eventLog":{"editor:grammar-changed":{"count":30,"name":"editor:grammar-changed","lastRun":1401399398257},"tabs:close-all-tabs":{"count":1,"name":"tabs:close-all-tabs","lastRun":1401180043014},"autocomplete:toggle":{"count":2,"name":"autocomplete:toggle","lastRun":1401188513904},"find-and-replace:show":{"count":1,"name":"find-and-replace:show","lastRun":1401180339323},"command-palette:toggle":{"count":1,"name":"command-palette:toggle","lastRun":1401184420315},"tree-view:add-folder":{"count":1,"name":"tree-view:add-folder","lastRun":1401189196921},"tree-view:paste":{"count":1,"name":"tree-view:paste","lastRun":1401189252630}}},"find-and-replace":{"viewState":{"findHistory":["less"],"replaceHistory":[],"modelState":{"useRegex":false,"inCurrentSelection":false,"caseSensitive":false}}},"fuzzy-finder":{"/Users/marian/Projects/miniprojects/electionCorrelation/app/scripts/main.js":1401366985978,"/Users/marian/Projects/miniprojects/electionCorrelation/package.json":1401367072448,"/Users/marian/Projects/miniprojects/electionCorrelation/Gruntfile.js":1401399394607,"/Users/marian/Projects/miniprojects/electionCorrelation/.jshintrc":1401189956052},"keybinding-resolver":{"attached":false},"metrics":{"sessionLength":65743546},"tree-view":{"directoryExpansionStates":{},"selectedPath":"/Users/marian/Projects/miniprojects/electionCorrelation/Gruntfile.js","hasFocus":false,"attached":true,"scrollLeft":0,"scrollTop":0,"width":200}}}